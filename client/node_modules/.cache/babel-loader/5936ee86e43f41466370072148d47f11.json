{"ast":null,"code":"/* Requiring dotenv allows loads environment constiables from a .env file into process.env. */\nrequire('dotenv').config();\n/* ----- PACKAGE DEPENDENCIES ----- */\n\n\nconst express = require('express');\n\nconst multer = require('multer');\n\nconst path = require('path');\n\nconst cors = require('cors');\n/* Calling Express */\n\n\nconst app = express();\n/* ----- MIDDLEWARE -----*/\n//#region \n\n/* Implementation of the CORS module */\n\napp.use(cors());\n/* To access the files in public folder */\n\napp.use(express.static('public'));\n/* Middleware integrated to Express allowing to display and receive the request as a JSON object via the POST method */\n\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n})); //#endregion\n\n/* ----- MULTER CONFIGURATION -----*/\n//#region \n\n/* Storage configuration - The disk storage engine for full control on storing files to disk */\n\nconst storage = multer.diskStorage({\n  /* Destination is used to determine within which folder the uploaded files should be stored */\n  destination: function (req, file, callback) {\n    /* Uploads is the name of folder which upload/storage video */\n    callback(null, \"./storage\");\n  },\n\n  /* The name of the file within the destination */\n  filename: function (req, file, callback) {\n    //! Don't work\n\n    /* Handle of file upload date */\n    // let dateCurrent = new Date();\n    // let dateLocale = dateCurrent.toLocaleDateString('fr-FR', {\n    //     year: 'numeric',\n    //     month: 'numeric',\n    //     day: 'numeric'\n    // })\n    // console.log(\"Date Current\", dateLocale);\n    // callback(null, file.originalname + \"-\" + dateCurrent + \".mp4\");\n\n    /* Name of the file on the user’s computer */\n    callback(null, file.originalname + \"-\" + \".mp4\");\n  }\n});\n/* Maximum size allowed - 5Go or 5000 Mb */\n\nconst maxSize = 1 * 50000 * 50000;\n/* Multer configuration */\n\nconst upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: maxSize\n  },\n\n  /* Function to control which files are accepted */\n  fileFilter: function (req, file, callback) {\n    /* Set the filetypes */\n    const filetypes = /mp4/;\n    const mimetype = filetypes.test(file.mimetype);\n    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());\n\n    if (mimetype && extname) {\n      return callback(null, true);\n    }\n    /* Error handling */\n\n\n    callback(\"Error: File upload only supports the \" + \"following filetypes - \" + filetypes);\n  }\n  /* 'myVideo' is the name of file attribute - Accept a single file with the name \"fieldname\". The single file will be stored in req.file.*/\n\n}).single(\"myVideo\"); //#endregion\n\n/* ----- ROUTES -----*/\n//#region \n\n/* Route GET - Homepage */\n\napp.get(\"/\", (req, res) => {\n  // res.sendFile(__dirname + \"/front/public/index.html\");\n  res.send('GET request to the homepage');\n});\n/* Route POST - Upload */\n\napp.post('/upload', (req, res) => {\n  upload(req, res, error => {\n    error ? res.send(error) : res.send(\"Successful, video uploaded ! \");\n  }); // res.redirect('./');\n});\n/* Route GET - Files */\n\napp.get('/files', (req, res) => {\n  res.send('Je suis dans la methode GET /files ');\n}); //#endregion\n\n/* ----- SERVER ----- */\n//#region \n\n/* Port setup - support for the port chosen by the developer if there is one, otherwise 5000 */\n\nconst port = process.env.PORT || 5000;\n/* Launching server */\n\napp.listen(port, () => {\n  console.log(`Server started on http://localhost:${port}`);\n}); //#endregion","map":{"version":3,"sources":["C:/Users/sophi/Desktop/Videomenthe - Challenge/player-upload/server/index.js"],"names":["require","config","express","multer","path","cors","app","use","static","json","urlencoded","extended","storage","diskStorage","destination","req","file","callback","filename","originalname","maxSize","upload","limits","fileSize","fileFilter","filetypes","mimetype","test","extname","toLowerCase","single","get","res","send","post","error","port","process","env","PORT","listen","console","log"],"mappings":"AAAA;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;AAEA;;;AACA,MAAMC,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB;AAEA;;;AACA,MAAMM,GAAG,GAAGJ,OAAO,EAAnB;AAGA;AACA;;AACA;;AACAI,GAAG,CAACC,GAAJ,CAAQF,IAAI,EAAZ;AAEA;;AACAC,GAAG,CAACC,GAAJ,CAAQL,OAAO,CAACM,MAAR,CAAe,QAAf,CAAR;AAEA;;AACAF,GAAG,CAACC,GAAJ,CAAQL,OAAO,CAACO,IAAR,EAAR;AAEAH,GAAG,CAACC,GAAJ,CAAQL,OAAO,CAACQ,UAAR,CAAmB;AACvBC,EAAAA,QAAQ,EAAE;AADa,CAAnB,CAAR,E,CAGA;;AAEA;AACA;;AACA;;AACA,MAAMC,OAAO,GAAGT,MAAM,CAACU,WAAP,CAAmB;AAC/B;AACAC,EAAAA,WAAW,EAAE,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,QAArB,EAA+B;AACxC;AACAA,IAAAA,QAAQ,CAAC,IAAD,EAAO,WAAP,CAAR;AACH,GAL8B;;AAM/B;AACAC,EAAAA,QAAQ,EAAE,UAAUH,GAAV,EAAeC,IAAf,EAAqBC,QAArB,EAA+B;AACrC;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAA,IAAAA,QAAQ,CAAC,IAAD,EAAOD,IAAI,CAACG,YAAL,GAAoB,GAApB,GAA0B,MAAjC,CAAR;AACH;AApB8B,CAAnB,CAAhB;AAuBA;;AACA,MAAMC,OAAO,GAAG,IAAI,KAAJ,GAAY,KAA5B;AAEA;;AACA,MAAMC,MAAM,GAAGlB,MAAM,CAAC;AAClBS,EAAAA,OAAO,EAAEA,OADS;AAElBU,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAEH;AAAZ,GAFU;;AAGlB;AACAI,EAAAA,UAAU,EAAE,UAAUT,GAAV,EAAeC,IAAf,EAAqBC,QAArB,EAA+B;AAEvC;AACA,UAAMQ,SAAS,GAAG,KAAlB;AACA,UAAMC,QAAQ,GAAGD,SAAS,CAACE,IAAV,CAAeX,IAAI,CAACU,QAApB,CAAjB;AACA,UAAME,OAAO,GAAGH,SAAS,CAACE,IAAV,CAAevB,IAAI,CAACwB,OAAL,CAAaZ,IAAI,CAACG,YAAlB,EAAgCU,WAAhC,EAAf,CAAhB;;AAEA,QAAIH,QAAQ,IAAIE,OAAhB,EAAyB;AACrB,aAAOX,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACH;AACD;;;AACAA,IAAAA,QAAQ,CAAC,0CACH,wBADG,GACwBQ,SADzB,CAAR;AAEH;AACD;;AAlBkB,CAAD,CAAN,CAmBZK,MAnBY,CAmBL,SAnBK,CAAf,C,CAoBA;;AAEA;AACA;;AACA;;AACAxB,GAAG,CAACyB,GAAJ,CAAQ,GAAR,EAAa,CAAChB,GAAD,EAAMiB,GAAN,KAAc;AACvB;AACAA,EAAAA,GAAG,CAACC,IAAJ,CAAS,6BAAT;AACH,CAHD;AAKA;;AACA3B,GAAG,CAAC4B,IAAJ,CAAS,SAAT,EAAoB,CAACnB,GAAD,EAAMiB,GAAN,KAAc;AAC9BX,EAAAA,MAAM,CAACN,GAAD,EAAMiB,GAAN,EAAYG,KAAD,IAAW;AACxBA,IAAAA,KAAK,GAAGH,GAAG,CAACC,IAAJ,CAASE,KAAT,CAAH,GAAqBH,GAAG,CAACC,IAAJ,CAAS,+BAAT,CAA1B;AACH,GAFK,CAAN,CAD8B,CAI9B;AAEH,CAND;AAQA;;AACA3B,GAAG,CAACyB,GAAJ,CAAQ,QAAR,EAAkB,CAAChB,GAAD,EAAMiB,GAAN,KAAc;AAC5BA,EAAAA,GAAG,CAACC,IAAJ,CAAS,qCAAT;AACH,CAFD,E,CAGA;;AAEA;AACA;;AACA;;AACA,MAAMG,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AAEA;;AACAjC,GAAG,CAACkC,MAAJ,CAAWJ,IAAX,EAAiB,MAAM;AACnBK,EAAAA,OAAO,CAACC,GAAR,CAAa,sCAAqCN,IAAK,EAAvD;AACH,CAFD,E,CAGA","sourcesContent":["/* Requiring dotenv allows loads environment constiables from a .env file into process.env. */\r\nrequire('dotenv').config();\r\n\r\n/* ----- PACKAGE DEPENDENCIES ----- */\r\nconst express = require('express');\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst cors = require('cors');\r\n\r\n/* Calling Express */\r\nconst app = express();\r\n\r\n\r\n/* ----- MIDDLEWARE -----*/\r\n//#region \r\n/* Implementation of the CORS module */\r\napp.use(cors());\r\n\r\n/* To access the files in public folder */\r\napp.use(express.static('public'));\r\n\r\n/* Middleware integrated to Express allowing to display and receive the request as a JSON object via the POST method */\r\napp.use(express.json());\r\n\r\napp.use(express.urlencoded({\r\n    extended: true\r\n}));\r\n//#endregion\r\n\r\n/* ----- MULTER CONFIGURATION -----*/\r\n//#region \r\n/* Storage configuration - The disk storage engine for full control on storing files to disk */\r\nconst storage = multer.diskStorage({\r\n    /* Destination is used to determine within which folder the uploaded files should be stored */\r\n    destination: function (req, file, callback) {\r\n        /* Uploads is the name of folder which upload/storage video */\r\n        callback(null, \"./storage\")\r\n    },\r\n    /* The name of the file within the destination */\r\n    filename: function (req, file, callback) {\r\n        //! Don't work\r\n        /* Handle of file upload date */\r\n        // let dateCurrent = new Date();\r\n        // let dateLocale = dateCurrent.toLocaleDateString('fr-FR', {\r\n        //     year: 'numeric',\r\n        //     month: 'numeric',\r\n        //     day: 'numeric'\r\n        // })\r\n        // console.log(\"Date Current\", dateLocale);\r\n        // callback(null, file.originalname + \"-\" + dateCurrent + \".mp4\");\r\n        /* Name of the file on the user’s computer */\r\n        callback(null, file.originalname + \"-\" + \".mp4\");\r\n    }\r\n});\r\n\r\n/* Maximum size allowed - 5Go or 5000 Mb */\r\nconst maxSize = 1 * 50000 * 50000;\r\n\r\n/* Multer configuration */\r\nconst upload = multer({\r\n    storage: storage,\r\n    limits: { fileSize: maxSize },\r\n    /* Function to control which files are accepted */\r\n    fileFilter: function (req, file, callback) {\r\n\r\n        /* Set the filetypes */\r\n        const filetypes = /mp4/;\r\n        const mimetype = filetypes.test(file.mimetype);\r\n        const extname = filetypes.test(path.extname(file.originalname).toLowerCase());\r\n\r\n        if (mimetype && extname) {\r\n            return callback(null, true);\r\n        }\r\n        /* Error handling */\r\n        callback(\"Error: File upload only supports the \"\r\n            + \"following filetypes - \" + filetypes);\r\n    }\r\n    /* 'myVideo' is the name of file attribute - Accept a single file with the name \"fieldname\". The single file will be stored in req.file.*/\r\n}).single(\"myVideo\");\r\n//#endregion\r\n\r\n/* ----- ROUTES -----*/\r\n//#region \r\n/* Route GET - Homepage */\r\napp.get(\"/\", (req, res) => {\r\n    // res.sendFile(__dirname + \"/front/public/index.html\");\r\n    res.send('GET request to the homepage');\r\n});\r\n\r\n/* Route POST - Upload */\r\napp.post('/upload', (req, res) => {\r\n    upload(req, res, (error) => {\r\n        error ? res.send(error) : res.send(\"Successful, video uploaded ! \")\r\n    });\r\n    // res.redirect('./');\r\n\r\n});\r\n\r\n/* Route GET - Files */\r\napp.get('/files', (req, res) => {\r\n    res.send('Je suis dans la methode GET /files ');\r\n});\r\n//#endregion\r\n\r\n/* ----- SERVER ----- */\r\n//#region \r\n/* Port setup - support for the port chosen by the developer if there is one, otherwise 5000 */\r\nconst port = process.env.PORT || 5000;\r\n\r\n/* Launching server */\r\napp.listen(port, () => {\r\n    console.log(`Server started on http://localhost:${port}`);\r\n});\r\n//#endregion"]},"metadata":{},"sourceType":"script"}